<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.googlecode.mobilityrpc</groupId>
    <artifactId>mobility-rpc</artifactId>
    <version>0.5.0</version>
    <packaging>jar</packaging>
    <name>Mobility-RPC</name>
    <url>http://maven.apache.org</url>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>compile-protoc</id>
                        <!--
                            Ideally we would use maven-protoc-plugin to generate protobuf classes,
                            but that plugin is not in Maven Central.

                            We wish to deploy this library to Maven Central, and guidelines for doing so
                            forbid relying on dependencies which are not also in central:
                            https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide

                            Therefore we use antrun to invoke protoc as a workaround. Note: like maven-protoc-plugin,
                            this requires protoc to be installed on the machine, and be accessible via the 'protoc'
                            command.
                        -->
                        <phase>generate-sources</phase>
                        <configuration>
                            <tasks>
                                <mkdir dir="target/generated-sources/protoc"/>
                                <!--<mkdir dir="target/generated-sources/com/googlecode/mobilityrpc/protobuf"/>-->
                                <path id="proto.path">
                                    <fileset dir="src/main/proto">
                                        <include name="**/*.proto" />
                                    </fileset>
                                </path>
                                <pathconvert pathsep=" " property="proto.files" refid="proto.path" />
                                <exec executable="protoc" failonerror="true">
                                    <arg value="--java_out=target/generated-sources/protoc" />
                                    <arg value="-I${project.basedir}/src/main/proto" />
                                    <!--suppress MavenModelInspection -->
                                    <arg line="${proto.files}" />
                                </exec>
                            </tasks>
                            <sourceRoot>target/generated-sources</sourceRoot>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.3.1</version>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>com.googlecode.mobilityrpc.quickstart.StandaloneMobilityServer</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <!--
                    *** Option one to build an executable jar: onejar-maven-plugin ***
                    Builds an single executable jar by embedding all dependency jars into a /lib folder within the outer
                    jar, then launches the main class via a special class loader which understands nested jars.
                    See: http://one-jar.sourceforge.net/

                    The advantage of this is: the executable is robust - we do not modify any dependency jars.
                    The disadvantage this is: the resulting jar is non-standard and cannot be used as a
                    library in other projects, it can only run the library as a standalone server only.
                -->
                <groupId>com.jolira</groupId>
                <artifactId>onejar-maven-plugin</artifactId>
                <version>1.4.4</version>
                <executions>
                    <execution>
                        <configuration>
                            <attachToBuild>true</attachToBuild>
                            <filename>${project.artifactId}-${project.version}-standalone-server.jar</filename>
                        </configuration>
                        <goals>
                            <!--suppress MavenModelInspection -->
                            <goal>one-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!--
                    *** Option two to build an executable jar: maven-shade-plugin ***
                    Builds a single executable by copying classes from all dependency jars directly into the main jar.
                    To prevent duplicate class issues, it relocates those classes to a new package within the jar:
                     com.googlecode.mobilityrpc.lib.*
                    It then updates the bytecode in all classes to refer to dependency classes in their new package.
                    Also this configures some transformers to merge licences present in any of the jars.

                    The advantage of this is: the resulting jar is a standard jar, and can be used as an executable,
                    or as a library in other projects (even if those projects use the same dependencies).
                    The disadvantage this is: this relocates classes from dependency jars and modifies their bytecode,
                    which carries risks of breaking something. However it seems to work with this project.
                 -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>1.5</version>
                <configuration>
                    <shadedArtifactAttached>true</shadedArtifactAttached>
                    <shadedClassifierName>all</shadedClassifierName>
                    <relocations>
                        <relocation>
                            <pattern>de</pattern>
                            <shadedPattern>com.googlecode.mobilityrpc.lib.de</shadedPattern>
                        </relocation>
                        <relocation>
                            <pattern>org</pattern>
                            <shadedPattern>com.googlecode.mobilityrpc.lib.org</shadedPattern>
                        </relocation>
                        <relocation>
                            <pattern>com.google.protobuf</pattern>
                            <shadedPattern>com.googlecode.mobilityrpc.lib.com.google.protobuf</shadedPattern>
                        </relocation>
                        <relocation>
                            <pattern>com.esotericsoftware</pattern>
                            <shadedPattern>com.googlecode.mobilityrpc.lib.com.esotericsoftware</shadedPattern>
                        </relocation>
                    </relocations>
                    <transformers>
                        <transformer implementation="org.apache.maven.plugins.shade.resource.ApacheNoticeResourceTransformer">
                            <addHeader>false</addHeader>
                        </transformer>
                    </transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <Main-Class>com.googlecode.mobilityrpc.quickstart.StandaloneMobilityServer</Main-Class>
                  </manifestEntries>
                </transformer>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <!--suppress MavenModelInspection -->
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.mycila.maven-license-plugin</groupId>
                <artifactId>maven-license-plugin</artifactId>
                <version>1.10.b1</version>
                <configuration>
                    <header>src/etc/header.txt</header>
                    <excludes>
                        <exclude>src/main/proto/*</exclude>
                    </excludes>
                </configuration>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.8.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.googlecode</groupId>
            <artifactId>kryo</artifactId>
            <version>1.04</version>
        </dependency>
        <dependency>
            <groupId>de.javakaffee</groupId>
            <artifactId>kryo-serializers</artifactId>
            <version>0.9</version>
        </dependency>
        <dependency>
            <groupId>org.objenesis</groupId>
            <artifactId>objenesis</artifactId>
            <version>1.2</version>
        </dependency>
        <dependency>
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java</artifactId>
            <version>2.4.1</version>
            <optional>false</optional>
        </dependency>
    </dependencies>
</project>
