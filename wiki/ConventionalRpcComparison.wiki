#summary How does mobility-rpc differ from conventional RPC?

=How does mobility-rpc differ from conventional RPC?=

==Conventional RPC Approach==

Conventional RPC is usually implemented using remote interfaces and proxy objects (or “stubs”).

The server application defines an interface containing the signature of a method (or “procedure”) that it wishes to make available over the network. Internally, the server contains a class which implements the methods of this interface. The server requests the RPC framework server-side to “bind” its implementation of the interface to a particular port on the server, or to a particular name in a directory-like structure.

The client application also contains a copy of the interface. The client application requests the RPC framework client-side to connect to, or “look up” an implementation of the interface on the specified remote server. The RPC framework creates a proxy object (or “stub”) implementation of the interface client-side, which when invoked relays method calls across the network to the real implementation on the server.

==Mobility-RPC Approach==

Mobility-RPC takes a completely different approach. Rather than specify which methods must be made available over the network in advance, the library allows the client application to transfer a regular Java object from the local JVM into the application in the remote JVM. Once in the remote JVM, the object is free to call any methods in the remote application, and if it wishes, return objects from the remote JVM back to the client application.

The Code Mobility aspect of the library comes into play because it does not require the classes which implement the object to exist in advance in the remote application. The mobility-rpc library automatically loads classes from the client application into the remote application and caches them there for the duration of the session. Sessions can be short-lived (ad-hoc), long-lived, or persistent.

==RPC as a Design Pattern==

Given that objects can be transferred back-and-forth statefully between machines, and interact with remote applications, it becomes possible to implement much more sophisticated applications and design patterns than RPC alone would allow. RPC is just one design pattern supported by Code Mobility.